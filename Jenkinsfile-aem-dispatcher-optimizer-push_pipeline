pipeline {
    agent any
    
    environment{
        GITHUB_CLONE_URL = 'git@git.corp.adobe.com:Skylab/aem-dispatcher-optimizer.git'
        GITHUB_CLONE_CREDENTIALS = 'dispjenk_credential'
        GITHUB_CLONE_ORG = 'Skylab'
        GITHUB_CLONE_REPO = 'aem-dispatcher-optimizer'
        GITHUB_CLONE_BRANCH = 'main'
        EMAIL_ENABLED = true
        EMAIL_RECIPIENTS = 'blefebvr@adobe.com, top@adobe.com'
    }

    stages{
        stage("clean workspace") {
            steps {
                deleteDir()
            }
        }

        //Stage: GitHub Integration
        stage('Clone sources') {
            steps{
                script{
                    def gitbranch = "${env.GITHUB_CLONE_BRANCH}"
                    if (!env.GITHUB_CLONE_BRANCH) {
                        gitbranch = "${env.GIT_BRANCH}"
                    }else{
                         //to handle issue with origin/BRANCH_NAME
                         def gitbranchOriginSplit = gitbranch.split('origin/')
                         def gitbranchOriginSplitLength = gitbranchOriginSplit.size()
                         gitbranch = gitbranchOriginSplitLength > 1 ? gitbranchOriginSplit[1] : gitbranch
                     }
                    print "git branch is ${gitbranch}"
                    git credentialsId: "${env.GITHUB_CLONE_CREDENTIALS}", url: "${env.GITHUB_CLONE_URL}", branch: "${gitbranch}"
                }
            }
        }

        //Stage: Maven Integration
        stage('Maven build') {
            steps{
                configFileProvider([configFile(fileId: '02d67b33-bd34-43dc-8acd-7dae5a90b8f0', variable: 'MAVEN_SETTINGS')]) {
                    sh """
                        mvn -s '${MAVEN_SETTINGS}' clean install
                    """
                }
            }
        }
    }
    post {
        failure {
            script {
                currentBuild.result = 'FAILURE'
            }
        }
        always {
            script{
                if(env.EMAIL_ENABLED.toBoolean()){
                    step([$class: 'Mailer',
                        notifyEveryUnstableBuild: true,
                        recipients: "${env.EMAIL_RECIPIENTS}",
                        sendToIndividuals: true])
                }
            }
        }
    }
}